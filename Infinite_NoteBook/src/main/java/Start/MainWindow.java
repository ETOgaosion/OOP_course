/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Start;
import Bars.ButtonBars.MainWindowButtonBar;
import java.awt.Color;
import java.util.ArrayList;
import Blocks.*;
import Blocks.BlockType;
import static Blocks.BlockType.CODE;
import static Blocks.BlockType.FORMULA;
import static Blocks.BlockType.HYPERTEXT;
import static Blocks.BlockType.IMAGE;
import static Blocks.BlockType.MARKDOWN;
import static Blocks.BlockType.RICHTEXT;
import static Blocks.BlockType.TITLE;
import static Blocks.BlockType.VIDEO;

/**
 *
 * @author gzy
 */
public class MainWindow extends javax.swing.JFrame {

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
        initComponentsManually();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem3 = new javax.swing.JMenuItem();
        MainLayer = new javax.swing.JLayeredPane();
        coverPanel = new javax.swing.JPanel();
        backgroundLabel = new javax.swing.JLabel();
        mainMenuBar = new javax.swing.JMenuBar();
        workspaceMenu = new javax.swing.JMenu();
        openNewWindowMenutem = new javax.swing.JMenuItem();
        closeAppMenuItem = new javax.swing.JMenuItem();
        fileMenu = new javax.swing.JMenu();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        importMenuItem = new javax.swing.JMenuItem();
        exportMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cpyMemuItem = new javax.swing.JMenuItem();
        cutMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        appendMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        findMenuItem = new javax.swing.JMenuItem();
        replaceMenuItem = new javax.swing.JMenuItem();
        GitMenu = new javax.swing.JMenu();
        settingsMenu = new javax.swing.JMenu();
        jMenu1 = new javax.swing.JMenu();

        jMenuItem3.setText("jMenuItem3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        coverPanel.setBackground(new Color(0,0,0,75));

        javax.swing.GroupLayout coverPanelLayout = new javax.swing.GroupLayout(coverPanel);
        coverPanel.setLayout(coverPanelLayout);
        coverPanelLayout.setHorizontalGroup(
            coverPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1390, Short.MAX_VALUE)
        );
        coverPanelLayout.setVerticalGroup(
            coverPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 920, Short.MAX_VALUE)
        );

        MainLayer.add(coverPanel);
        coverPanel.setBounds(0, 0, 1390, 920);

        backgroundLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/main_background.png"))); // NOI18N
        MainLayer.add(backgroundLabel);
        backgroundLabel.setBounds(0, 0, 1390, 920);

        workspaceMenu.setText("Workspace");

        openNewWindowMenutem.setText("Open New Window");
        openNewWindowMenutem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openNewWindowMenutemActionPerformed(evt);
            }
        });
        workspaceMenu.add(openNewWindowMenutem);

        closeAppMenuItem.setText("Close App");
        workspaceMenu.add(closeAppMenuItem);

        mainMenuBar.add(workspaceMenu);

        fileMenu.setText("File");

        saveMenuItem.setText("Save");
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setText("Sace As");
        fileMenu.add(saveAsMenuItem);

        importMenuItem.setText("Import");
        fileMenu.add(importMenuItem);

        exportMenuItem.setText("Export");
        fileMenu.add(exportMenuItem);

        mainMenuBar.add(fileMenu);

        editMenu.setText("Edit Block");

        cpyMemuItem.setText("Copy");
        cpyMemuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cpyMemuItemActionPerformed(evt);
            }
        });
        editMenu.add(cpyMemuItem);

        cutMenuItem.setText("Cut");
        editMenu.add(cutMenuItem);

        pasteMenuItem.setText("Paste");
        editMenu.add(pasteMenuItem);

        appendMenuItem.setText("Append");
        editMenu.add(appendMenuItem);

        deleteMenuItem.setText("Delete");
        editMenu.add(deleteMenuItem);

        findMenuItem.setText("Find");
        editMenu.add(findMenuItem);

        replaceMenuItem.setText("Replace");
        editMenu.add(replaceMenuItem);

        mainMenuBar.add(editMenu);

        GitMenu.setText("Git");
        mainMenuBar.add(GitMenu);

        settingsMenu.setText("Settings");
        mainMenuBar.add(settingsMenu);

        jMenu1.setText("About");
        mainMenuBar.add(jMenu1);

        setJMenuBar(mainMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MainLayer, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1391, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MainLayer, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 921, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void initComponentsManually(){
        mainButtonBar = new Bars.ButtonBars.MainWindowButtonBar();
        mainButtonBar.setBounds(0, 0, 1400, 41);
        MainLayer.add(mainButtonBar);
        MainLayer.moveToFront(mainButtonBar);
    }
    
    private class AddBlockReturnValue{
        int index;
        int height;

        public AddBlockReturnValue(int thisIndex, int thisHight) {
            index = thisIndex;
            height = thisHight;
        }
        
    }
    
    private AddBlockReturnValue addInputBlock(int height){
        int index = inputBlockList.size() - 1;
        inputBlockList.get(index).setBounds(100, height, 1200, 300);
        return new AddBlockReturnValue(index,300);
    }
    
    private AddBlockReturnValue addMediaBlock(int height){
        int index = mediaBlockList.size() - 1;
        mediaBlockList.get(index).setBounds(100, height, 1200, 200);
        return new AddBlockReturnValue(index,200);
    }
    
    public AddBlockReturnValue simplyAddBlock(BlockType newBlockType, int height){
        int index = 0;
        int curBlockHeight = 0;
        switch(newBlockType){
            case BLANK->{
                blankBlockList.add(new BlankBlock(this));
                index = blankBlockList.size() - 1;
                blankBlockList.get(index).setBounds(100, height, 1200, 100);
                curBlockHeight = 100;
            }
            case COMMONTEXT->{
                inputBlockList.add(new CommonTextBlock(this));
                AddBlockReturnValue ret = addInputBlock(height);
                index = ret.index;
                curBlockHeight = ret.height;
            }
            case CODE->{
                inputBlockList.add(new CodeBlock(this));
                AddBlockReturnValue ret = addInputBlock(height);
                index = ret.index;
                curBlockHeight = ret.height;
            }
            case HYPERTEXT->{
                inputBlockList.add(new HyperTextBlock(this));
                AddBlockReturnValue ret = addInputBlock(height);
                index = ret.index;
                curBlockHeight = ret.height;
            }
            case MARKDOWN->{
                inputBlockList.add(new MarkdownBlock(this));
                AddBlockReturnValue ret = addInputBlock(height);
                index = ret.index;
                curBlockHeight = ret.height;
            }
            case FORMULA->{
                inputBlockList.add(new FormulaBlock(this));
                AddBlockReturnValue ret = addInputBlock(height);
                index = ret.index;
                curBlockHeight = ret.height;
            }
            case RICHTEXT->{
                inputBlockList.add(new RichTextBlock(this));
                AddBlockReturnValue ret = addInputBlock(height);
                index = ret.index;
                curBlockHeight = ret.height;
            }
            case TITLE->{
                inputBlockList.add(new InfiniteTitle(this));
                AddBlockReturnValue ret = addInputBlock(height);
                index = ret.index;
                curBlockHeight = ret.height;
                break;
            }
            case MEDIA->{
                mediaBlockList.add(new MediaBlock(this));
                AddBlockReturnValue ret = addMediaBlock(height);
                index = ret.index;
                curBlockHeight = ret.height;
            }
            case IMAGE->{
                mediaBlockList.add(new ImageBlock(this));
                AddBlockReturnValue ret = addMediaBlock(height);
                index = ret.index;
                curBlockHeight = ret.height;
            }
            case VIDEO->{
                mediaBlockList.add(new VideoBlock(this));
                AddBlockReturnValue ret = addMediaBlock(height);
                index = ret.index;
                curBlockHeight = ret.height;
            }
            case TABLE->{
                tableBlockList.add(new TableBlock(this));
                index = tableBlockList.size() - 1;
                tableBlockList.get(index).setBounds(100, height, 1200, 300);
            }
            default->{
            }
        }
        return new AddBlockReturnValue(index,curBlockHeight);
    }
    
    public boolean appendBlock(BlockType newBlockType){
        totalBlockList.add(new BlockDocument(newBlockType,totalHeight));
        int index = 0;
        int curBlockHeight = 0;
        AddBlockReturnValue ret = simplyAddBlock(newBlockType,totalHeight);
        index = ret.index;
        curBlockHeight = ret.height;
        totalBlockList.get(totalBlockList.size() - 1).setIndex(index);
        totalBlockList.get(totalBlockList.size() - 1).setHight(curBlockHeight);
        totalHeight += curBlockHeight + 50;
        rendering();
        return true;
    }
    
    
    public boolean adjustBlockVerticalPosition(int index, int adjustHeight){
        if(index < 0 || index >= totalBlockList.size() || totalBlockList.isEmpty()){
            return false;
        }
        BlockDocument toAdjusBlockDocument;
        for(int i = index; i < totalBlockList.size(); i++){
            toAdjusBlockDocument = totalBlockList.get(i);
            toAdjusBlockDocument.startHeight -= adjustHeight;
            switch(toAdjusBlockDocument.blockType){
                case BLANK->{
                    blankBlockList.get(toAdjusBlockDocument.index).setBounds(100, toAdjusBlockDocument.height, 1200, 100);
                }
                case COMMONTEXT,CODE,HYPERTEXT,MARKDOWN,FORMULA,RICHTEXT,TITLE->{
                    inputBlockList.get(toAdjusBlockDocument.index).setBounds(100, toAdjusBlockDocument.height, 1200, 300);
                }
                case MEDIA,IMAGE,VIDEO->{
                    mediaBlockList.get(toAdjusBlockDocument.index).setBounds(100, toAdjusBlockDocument.height, 1200, 200);
                }
                case TABLE->{
                    tableBlockList.get(toAdjusBlockDocument.index).setBounds(100, toAdjusBlockDocument.height, 1200, 300);
                }
                default->{
                }
            }
        }
        return true;
    }
    
    public BlockDocument simplyRemoveBlock(int index){
        if(index < 0 || index >= totalBlockList.size() || totalBlockList.isEmpty()){
            return null;
        }
        BlockDocument deleteBlockDoc = totalBlockList.remove(index);
        switch(deleteBlockDoc.blockType){
            case BLANK->{
                blankBlockList.remove(deleteBlockDoc.index);
            }
            case COMMONTEXT,CODE,HYPERTEXT,MARKDOWN,FORMULA,RICHTEXT,TITLE->{
                inputBlockList.remove(deleteBlockDoc.index);
            }
            case MEDIA,IMAGE,VIDEO->{
                mediaBlockList.remove(deleteBlockDoc.index);
            }
            case TABLE->{
                tableBlockList.remove(deleteBlockDoc.index);
            }
            default->{
            }
        }
        return deleteBlockDoc;
    }
    
    public int simplyInsertBlock(int index, int height, BlockType newBlockType){
        if(index < 0 || index >= totalBlockList.size() || totalBlockList.isEmpty()){
            return -1;
        }
        int insertIndex = 0;
        int curBlockHeight = 0;
        AddBlockReturnValue ret = simplyAddBlock(newBlockType,height);
        insertIndex = ret.index;
        curBlockHeight = ret.height;
        totalBlockList.add(index, new BlockDocument(newBlockType,height));
        totalBlockList.get(index).height = curBlockHeight;
        return curBlockHeight;
    }
    
    public boolean deleteBlock(int index){
        if(index < 0 || index >= totalBlockList.size() || totalBlockList.isEmpty()){
            return false;
        }
        BlockDocument deleteBlockDocument = simplyRemoveBlock(index);
        totalHeight -= deleteBlockDocument.height;
        adjustBlockVerticalPosition(index, deleteBlockDocument.height);
        rendering();
        return true;
    }
    
    public boolean changeBlock(int index, BlockType newType){
        if(index < 0 || index >= totalBlockList.size() || totalBlockList.isEmpty()){
            return false;
        }
        int adjustHeight = 0;
        BlockDocument deleteBlockDocument = simplyRemoveBlock(index);
        adjustHeight = deleteBlockDocument.height - simplyInsertBlock(index, deleteBlockDocument.startHeight, newType);
        adjustBlockVerticalPosition(index, adjustHeight);
        rendering();
        return true;
    }
    
    public boolean rendering(){
        if(totalBlockList.isEmpty()){
            return false;
        }
        for (int i = 0; i < totalBlockList.size(); i++) {
            BlockDocument currDocument = totalBlockList.get(i);
            switch(currDocument.blockType){
                case BLANK->{
                    BlankBlock renderBlankBlock = blankBlockList.get(currDocument.index);
                    MainLayer.add(renderBlankBlock);
                    MainLayer.moveToFront(renderBlankBlock);
                }
                case COMMONTEXT,CODE,HYPERTEXT,MARKDOWN,FORMULA,RICHTEXT,TITLE->{
                    CommonTextBlock renderCommonTextBlock = inputBlockList.get(currDocument.index);
                    MainLayer.add(renderCommonTextBlock);
                    MainLayer.moveToFront(renderCommonTextBlock);
                }
                case MEDIA,IMAGE,VIDEO->{
                    MediaBlock renderMediaBlock = mediaBlockList.get(currDocument.index);
                    MainLayer.add(renderMediaBlock);
                    MainLayer.moveToFront(renderMediaBlock);
                }
                case TABLE->{
                    TableBlock renderTableBlock = tableBlockList.get(currDocument.index);
                    MainLayer.add(renderTableBlock);
                    MainLayer.moveToFront(renderTableBlock);
                }
                default->{
                }
            }
        }
        return true;
    }
    
    private void openNewWindowMenutemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openNewWindowMenutemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_openNewWindowMenutemActionPerformed

    private void cpyMemuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cpyMemuItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cpyMemuItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                MainWindow mainWindowObj = new MainWindow();
                mainWindowObj.setVisible(true);
                mainWindowObj.setBounds(0, 0, 1400, 960);
            }
        });
    }
    
    private MainWindowButtonBar mainButtonBar;
    private ArrayList<BlankBlock> blankBlockList = new ArrayList<>();
    private ArrayList<CommonTextBlock> inputBlockList = new ArrayList<>();
    private ArrayList<MediaBlock> mediaBlockList = new ArrayList<>();
    private ArrayList<TableBlock> tableBlockList = new ArrayList<>();
    
    private class BlockDocument{
        public BlockType blockType = BlockType.BLANK;
        public int index = 0;
        public int startHeight = 0;
        public int height = 0;

        public BlockDocument(BlockType thisBlockType) {
            blockType = thisBlockType;
        }
        
        public BlockDocument(BlockType thisBlockType, int thisStartHeight) {
            blockType = thisBlockType;
            startHeight = thisStartHeight;
        }
        
        public boolean setIndex(int newIndex){
            index = newIndex;
            return true;
        }
        
        public boolean setHight(int newHight){
            height = newHight;
            return true;
        }
        
        public int getHight(){
            return height;
        }
        
    }
    
    private ArrayList<BlockDocument> totalBlockList = new ArrayList<>();
    private int totalHeight = 0;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu GitMenu;
    private javax.swing.JLayeredPane MainLayer;
    private javax.swing.JMenuItem appendMenuItem;
    private javax.swing.JLabel backgroundLabel;
    private javax.swing.JMenuItem closeAppMenuItem;
    private javax.swing.JPanel coverPanel;
    private javax.swing.JMenuItem cpyMemuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exportMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem findMenuItem;
    private javax.swing.JMenuItem importMenuItem;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuBar mainMenuBar;
    private javax.swing.JMenuItem openNewWindowMenutem;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JMenuItem replaceMenuItem;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JMenu settingsMenu;
    private javax.swing.JMenu workspaceMenu;
    // End of variables declaration//GEN-END:variables
}
